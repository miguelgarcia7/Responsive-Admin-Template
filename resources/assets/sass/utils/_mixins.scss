@mixin breakpoint($media) {
  @if $media == extra-small {
    @media (min-width : 320px) { @content;}
  }
  @else if $media == small {
    @media (min-width: 480px) { @content;}
  }
  @else if $media == medium {
    @media (min-width: 768px)  { @content; }
  }
  @else if $media == large {
    @media (min-width: 992px)  { @content; }
  }
  @else if $media == extra-large {
    @media (min-width: 1200px)  { @content; }
  }
  @else if $media == xx-large {
    @media (min-width: 1400px)  { @content; }
  }
  @else if $media == xxx-large {
    @media (min-width: 1600px)  { @content; }
  }
}

@mixin vertical-align( $position: relative ) {
    position: $position;
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
}
@mixin translateY( $position: 0 ) {
    -ms-transform: translateY($position);
    -webkit-transform: translateY($position);
    -moz-transform: translateY($position);
    -o-transform: translateY($position);
    transform: translateY($position);
}
@mixin translateX( $position: 0 ) {
    -ms-transform: translateX($position);
    -webkit-transform: translateX($position);
    -moz-transform: translateX($position);
    -o-transform: translateX($position);
    transform: translateX($position);
}
@mixin background-opacity($color, $opacity: 0.8) {
    background: $color; /* The Fallback */
    background: rgba($color, $opacity);
}
@mixin background-cover() {
    -webkit-background-size: cover;
    -moz-background-size: cover;
    -o-background-size: cover;
    background-size: cover;
}
@mixin sharp-image() {
  image-rendering: optimizeSpeed;             /*                     */
  image-rendering: -moz-crisp-edges;          /* Firefox             */
  image-rendering: -o-crisp-edges;            /* Opera               */
  image-rendering: -webkit-optimize-contrast; /* Chrome (and Safari) */
  image-rendering: optimize-contrast;         /* CSS3 Proposed       */
  -ms-interpolation-mode: nearest-neighbor;   /* IE8+                 */
}


@mixin transitions($str) {
  -webkit-transition: $str;
  -moz-transition: $str;
  -o-transition: $str;
  transition: $str;
}
@mixin easeInOutExpo($elem, $sec) {
  -webkit-transition: $elem $sec cubic-bezier(1.000, 0.000, 0.000, 1.000);
  -moz-transition: $elem $sec cubic-bezier(1.000, 0.000, 0.000, 1.000);
  -o-transition: $elem $sec cubic-bezier(1.000, 0.000, 0.000, 1.000);
  transition: $elem $sec cubic-bezier(1.000, 0.000, 0.000, 1.000); /* easeInOutExpo */

  -webkit-transition-timing-function: cubic-bezier(1.000, 0.000, 0.000, 1.000);
  -moz-transition-timing-function: cubic-bezier(1.000, 0.000, 0.000, 1.000);
  -o-transition-timing-function: cubic-bezier(1.000, 0.000, 0.000, 1.000);
  transition-timing-function: cubic-bezier(1.000, 0.000, 0.000, 1.000); /* easeInOutExpo */
}

@mixin easeInOutCubic($elem, $sec) {
  -webkit-transition: $elem $sec cubic-bezier(0.645, 0.045, 0.355, 1.000);
  -moz-transition: $elem $sec cubic-bezier(0.645, 0.045, 0.355, 1.000);
  -o-transition: $elem $sec cubic-bezier(0.645, 0.045, 0.355, 1.000);
  transition: $elem $sec cubic-bezier(0.645, 0.045, 0.355, 1.000); /* easeInOutCubic */

  -webkit-transition-timing-function: cubic-bezier(0.645, 0.045, 0.355, 1.000);
  -moz-transition-timing-function: cubic-bezier(0.645, 0.045, 0.355, 1.000);
  -o-transition-timing-function: cubic-bezier(0.645, 0.045, 0.355, 1.000);
  transition-timing-function: cubic-bezier(0.645, 0.045, 0.355, 1.000); /* easeInOutCubic */
 }
@mixin easeOutQuart($elem, $sec) {
    -webkit-transition: $elem $sec cubic-bezier(0.165, 0.840, 0.440, 1.000);
    -moz-transition: $elem $sec cubic-bezier(0.165, 0.840, 0.440, 1.000);
    -o-transition: $elem $sec cubic-bezier(0.165, 0.840, 0.440, 1.000);
    transition: $elem $sec cubic-bezier(0.165, 0.840, 0.440, 1.000); /* easeOutQuart */

    -webkit-transition-timing-function: cubic-bezier(0.165, 0.840, 0.440, 1.000);
    -moz-transition-timing-function: cubic-bezier(0.165, 0.840, 0.440, 1.000);
    -o-transition-timing-function: cubic-bezier(0.165, 0.840, 0.440, 1.000);
    transition-timing-function: cubic-bezier(0.165, 0.840, 0.440, 1.000); /* easeOutQuart */
}

@mixin easeInQuart($elem, $sec) {
    -webkit-transition: all 500ms cubic-bezier(0.895, 0.030, 0.685, 0.220);
    -moz-transition: all 500ms cubic-bezier(0.895, 0.030, 0.685, 0.220);
    -o-transition: all 500ms cubic-bezier(0.895, 0.030, 0.685, 0.220);
    transition: all 500ms cubic-bezier(0.895, 0.030, 0.685, 0.220); /* easeInQuart */

    -webkit-transition-timing-function: cubic-bezier(0.895, 0.030, 0.685, 0.220);
    -moz-transition-timing-function: cubic-bezier(0.895, 0.030, 0.685, 0.220);
    -o-transition-timing-function: cubic-bezier(0.895, 0.030, 0.685, 0.220);
    transition-timing-function: cubic-bezier(0.895, 0.030, 0.685, 0.220); /* easeInQuart */
}

@mixin easeInOutQuart($elem, $sec) {
    -webkit-transition: $elem $sec cubic-bezier(0.770, 0.000, 0.175, 1.000);
    -moz-transition: $elem $sec cubic-bezier(0.770, 0.000, 0.175, 1.000);
    -o-transition: $elem $sec cubic-bezier(0.770, 0.000, 0.175, 1.000);
    transition: $elem $sec cubic-bezier(0.770, 0.000, 0.175, 1.000); /* easeInOutQuart */

    -webkit-transition-timing-function: cubic-bezier(0.770, 0.000, 0.175, 1.000);
    -moz-transition-timing-function: cubic-bezier(0.770, 0.000, 0.175, 1.000);
    -o-transition-timing-function: cubic-bezier(0.770, 0.000, 0.175, 1.000);
    transition-timing-function: cubic-bezier(0.770, 0.000, 0.175, 1.000); /* easeInOutQuart */
 }

@mixin easeInQuint($elem, $sec) {
    -webkit-transition: all 500ms cubic-bezier(0.755, 0.050, 0.855, 0.060);
    -moz-transition: all 500ms cubic-bezier(0.755, 0.050, 0.855, 0.060);
    -o-transition: all 500ms cubic-bezier(0.755, 0.050, 0.855, 0.060);
    transition: all 500ms cubic-bezier(0.755, 0.050, 0.855, 0.060); /* easeInQuint */

    -webkit-transition-timing-function: cubic-bezier(0.755, 0.050, 0.855, 0.060);
    -moz-transition-timing-function: cubic-bezier(0.755, 0.050, 0.855, 0.060);
    -o-transition-timing-function: cubic-bezier(0.755, 0.050, 0.855, 0.060);
    transition-timing-function: cubic-bezier(0.755, 0.050, 0.855, 0.060); /* easeInQuint */
}

@mixin easeOutCirc($elem, $sec) {
  -webkit-transition: $elem $sec cubic-bezier(0.075, 0.820, 0.165, 1.000);
  -moz-transition: $elem $sec cubic-bezier(0.075, 0.820, 0.165, 1.000);
  -o-transition: $elem $sec cubic-bezier(0.075, 0.820, 0.165, 1.000);
  transition: $elem $sec cubic-bezier(0.075, 0.820, 0.165, 1.000); /* easeOutCirc */

  -webkit-transition-timing-function: cubic-bezier(0.075, 0.820, 0.165, 1.000);
  -moz-transition-timing-function: cubic-bezier(0.075, 0.820, 0.165, 1.000);
  -o-transition-timing-function: cubic-bezier(0.075, 0.820, 0.165, 1.000);
  transition-timing-function: cubic-bezier(0.075, 0.820, 0.165, 1.000); /* easeOutCirc */
 }

// =============================================================================
// Font Face
// =============================================================================

@mixin font-face($name, $path, $version, $weight: normal, $style: normal, $exts: eot woff ttf svg) {
  $src: null;

  $extmods: (
    eot: "?",
    svg: "#" + str-replace($name, " ", "_")
  );

  $formats: (
    eot: "embedded-opentype",
    otf: "opentype",
    ttf: "truetype"
  );

  @each $ext in $exts {
    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
    $print-version: "?v="+$version;
    @if $ext == eot {
      $print-version: "v="+$version;
    }

    $src: append($src, url(quote($path + "." + $extmod+$print-version)) format(quote($format)), comma);
  }

  @font-face {
    font-family: quote($name);
    font-style: $style;
    font-weight: $weight;
    src:url(quote($path + ".eot" ));
    src: $src;
  }
}
